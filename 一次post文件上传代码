package com.c503.filereceive.fastdfs.httpclient;

import com.c503.filereceive.utiles.PropertiesInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * @author skl
 */
public class HttpPostClient {
	private static Logger logger = LoggerFactory.getLogger(HttpPostClient.class);

	public static String uploadFile(File file,String Url,String bucketName) {
		try {
			// 换行符
			final String newLine = "\r\n";
			final String boundaryPrefix = "--";
			// 定义数据分隔线
			String BOUNDARY = "========7d4a6d158c9";
			// 服务器的域名
			URL url = new URL(Url);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			// 设置为POST情
			conn.setRequestMethod("POST");
			// 发送POST请求必须设置如下两行
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setUseCaches(false);
			// 设置请求头参数
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("Charsert", "UTF-8");
			conn.setRequestProperty("Asoco-API-Token", "xxx");
			conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + BOUNDARY);
			//============输出流===========
			OutputStream out = new DataOutputStream(conn.getOutputStream());
			// 上传文件
			StringBuilder sb = new StringBuilder();
			sb.append(boundaryPrefix);
			sb.append(BOUNDARY);
			sb.append(newLine);
			// 文件参数
			sb.append("Content-Disposition: form-data;name=\"file\";filename=\"" + file.getName()
					+ "\"" + newLine);
			sb.append("Content-Type:application/octet-stream");
			// 参数头设置完以后需要两个换行，然后才是参数内容
			sb.append(newLine);
			sb.append(newLine);

			// 将参数头的数据写入到输出流中
			out.write(sb.toString().getBytes());

			// 数据输入流,用于读取文件数据
			DataInputStream in = new DataInputStream(new FileInputStream(file));
			byte[] bufferOut = new byte[1024];
			int bytes = 0;
			// 每次读1KB数据,并且将文件数据写入到输出流中
			while ((bytes = in.read(bufferOut)) != -1) {
				out.write(bufferOut, 0, bytes);
			}
			// 最后添加换行
			out.write(newLine.getBytes());
			//关闭文件流
			in.close();

			//=====增加bucketName=========
			StringBuilder sb1 = new StringBuilder();
			sb1.append(boundaryPrefix);
			sb1.append(BOUNDARY);
			sb1.append(newLine);
			sb1.append("Content-Disposition: form-data; name=\"bucketName\"");
			// 参数头设置完以后需要两个换行，然后才是参数内容
			sb1.append(newLine);
			sb1.append(newLine);
			sb1.append(bucketName);
			// 将参数头的数据写入到输出流中
			out.write(sb1.toString().getBytes());

			//===========定义最后数据分隔线，即--加上BOUNDARY再加上--。
			byte[] end_data = (newLine + boundaryPrefix + BOUNDARY + boundaryPrefix + newLine)
					.getBytes();
			// 写上结尾标识
			out.write(end_data);
			//刷新
			out.flush();
			//关闭输出流
			out.close();
			return getLog(conn);
		} catch (Exception e) {
			System.out.println("发送POST请求出现异常！" + e);
			e.printStackTrace();
		}

		return "";
	}

	private static String getLog(HttpURLConnection conn){
		BufferedReader reader = null;
		String line = null;
		try {
			reader = new BufferedReader(new InputStreamReader(
					conn.getInputStream()));
			while ((line = reader.readLine()) != null) {
				System.out.print("fs response: " + line);
				return line;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return line;
	}


	public static void main(String[] args) {
		File file = new File("H:\\filereceive\\1024.png");
		uploadFile(file, PropertiesInfo.getStrValue("upRestURL"),"test");
	}
}
