#!/bin/bash
ANALY_DATE=$1
ANALY_HOUR=$2

#HQL
hive<<EOF
use dcl;
alter table tb_xdr_ifc_uu drop partition(dt="$ANALY_DATE",h="$ANALY_HOUR");
alter table tb_xdr_ifc_uu add partition(dt="$ANALY_DATE",h="$ANALY_HOUR")
location "/dcl/TB_XDR_IFC_UU/${ANALY_DATE}/${ANALY_HOUR}";

alter table tb_xdr_ifc_x2 drop partition(dt="$ANALY_DATE",h="$ANALY_HOUR");
alter table tb_xdr_ifc_x2 add partition(dt="$ANALY_DATE",h="$ANALY_HOUR")
LOCATION "/dcl/TB_XDR_IFC_X2/${ANALY_DATE}/${ANALY_HOUR}"; 

#alter table cell_mr drop partition(dt="$ANALY_DATE",h="$ANALY_HOUR");
#alter table cell_mr add partition(dt="$ANALY_DATE",h="$ANALY_HOUR");

alter table lte_mro_source drop partition(dt="$ANALY_DATE",h="$ANALY_HOUR");
alter table lte_mro_source add partition(dt="$ANALY_DATE",h="$ANALY_HOUR")
LOCATION "/dcl/LTE_MRO_SOURCE/${ANALY_DATE}/${ANALY_HOUR}";

INSERT OVERWRITE TABLE DCL.tb_Xdr_ifc_x2
partition(dt="$ANALY_DATE",h="$ANALY_HOUR")
SELECT
 x2. LENGTH,
 x2.CITY,
 x2.INTERFACE,
 x2.XDRID,
 x2.RAT,
 S1.IMSI,
 S1.IMEI,
 S1.MSISDN,
 x2.PROCEDURETYPE,
 x2.PROCEDURESTARTTIME,
 x2.PROCEDUREENDTIME,
 x2.PROCEDURESTATUS,
 x2.CELLID,
 x2.TARGETCELLID,
 x2.ENBID,
 x2.TARGETENBID,
 x2.MMEUES1APID,
 x2.MMEGROUPID,
 x2.MMECODE,
 x2.REQUESTCAUSE,
 x2.FAILURECAUSE,
 x2.EPSBEARERNUMBER,
 x2.BEARER0ID,
 x2.BEARER0STATUS,
 x2.BEARER1ID,
 x2.BEARER1STATUS,
 x2.BEARER2ID,
 x2.BEARER2STATUS,
 x2.BEARER3ID,
 x2.BEARER3STATUS,
 x2.BEARER4ID,
 x2.BEARER4STATUS,
 x2.BEARER5ID,
 x2.BEARER5STATUS,
 x2.BEARER6ID,
 x2.BEARER6STATUS,
 x2.BEARER7ID,
 x2.BEARER7STATUS,
 x2.BEARER8ID,
 x2.BEARER8STATUS,
 x2.BEARER9ID,
 x2.BEARER9STATUS,
 x2.BEARER10ID,
 x2.BEARER10STATUS,
 x2.BEARER11ID,
 x2.BEARER11STATUS,
 x2.BEARER12ID,
 x2.BEARER12STATUS,
 x2.BEARER13ID,
 x2.BEARER13STATUS,
 x2.BEARER14ID,
 x2.BEARER14STATUS,
 x2.BEARER15ID,
 x2.BEARER15STATUS,
 x2.RANGETIME,
 0
FROM
 ddl.tb_Xdr_ifc_x2 x2
LEFT OUTER JOIN (
 SELECT
  B.IMSI,
  B.IMEI,
  B.MSISDN,
  A .MMEUES1APID,
  A .MMEGROUPID,
  A .MMECODE,
  A .PROCEDUREENDTIME
 FROM
  (
   SELECT
    MMEUES1APID,
    MMEGROUPID,
    MMECODE,
    MIN (PROCEDUREENDTIME) PROCEDUREENDTIME
   FROM
    ddl.tb_Xdr_ifc_s1mme
    where dt='$ANALY_DATE' and h='$ANALY_HOUR'
   GROUP BY
    MMEUES1APID,
    MMEGROUPID,
    MMECODE
  ) A
 INNER JOIN (
  SELECT
   IMSI,
   IMEI,
   MSISDN,
   MMEUES1APID,
   MMEGROUPID,
   MMECODE,
   PROCEDUREENDTIME
  FROM
   ddl.tb_Xdr_ifc_s1mme
   where dt='$ANALY_DATE' and h='$ANALY_HOUR'
 ) B ON A .PROCEDUREENDTIME = B.PROCEDUREENDTIME
 AND A .MMEUES1APID = B.MMEUES1APID
 AND A .MMEGROUPID = B.MMEGROUPID
 AND A .MMECODE = B.MMECODE
) S1 ON x2.MMEUES1APID = S1.MMEUES1APID
AND x2.MMEGROUPID = S1.MMEGROUPID
AND x2.MMECODE = S1.MMECODE
WHERE
 x2.dt='$ANALY_DATE' and x2.h='$ANALY_HOUR' and
 x2.PROCEDUREENDTIME - S1.PROCEDUREENDTIME <= 600000;

INSERT OVERWRITE TABLE DCL.tb_Xdr_ifc_uu
partition(dt="$ANALY_DATE",h="$ANALY_HOUR")
SELECT
 UU. LENGTH,
 UU.CITY,
 UU.INTERFACE,
 UU.XDRID,
 UU.RAT,
 S1.IMSI,
 S1.IMEI,
 S1.MSISDN,
 UU.PROCEDURETYPE,
 UU.PROCEDURESTARTTIME,
 UU.PROCEDUREENDTIME,
 UU.KEYWORD1,
 UU.KEYWORD2,
 UU.PROCEDURESTATUS,
 UU.PLMNID,
 UU.ENBID,
 UU.CELLID,
 UU.CRNTI,
 UU.TARGETENBID,
 UU.TARGETCELLID,
 UU.TARGETCRNTI,
 UU.MMEUES1APID,
 UU.MMEGROUPID,
 UU.MMECODE,
 UU.MTMSI,
 UU.CSFBINDICATION,
 UU.REDIRECTEDNETWORK,
 UU.EPSBEARERNUMBER,
 UU.BEARER0ID,
 UU.BEARER0STATUS,
 UU.BEARER1ID,
 UU.BEARER1STATUS,
 UU.BEARER2ID,
 UU.BEARER2STATUS,
 UU.BEARER3ID,
 UU.BEARER3STATUS,
 UU.BEARER4ID,
 UU.BEARER4STATUS,
 UU.BEARER5ID,
 UU.BEARER5STATUS,
 UU.BEARER6ID,
 UU.BEARER6STATUS,
 UU.BEARER7ID,
 UU.BEARER7STATUS,
 UU.BEARER8ID,
 UU.BEARER8STATUS,
 UU.BEARER9ID,
 UU.BEARER9STATUS,
 UU.BEARER10ID,
 UU.BEARER10STATUS,
 UU.BEARER11ID,
 UU.BEARER11STATUS,
 UU.BEARER12ID,
 UU.BEARER12STATUS,
 UU.BEARER13ID,
 UU.BEARER13STATUS,
 UU.BEARER14ID,
 UU.BEARER14STATUS,
 UU.BEARER15ID,
 UU.BEARER15STATUS,
 UU.RANGETIME,
 0
FROM
 ddl.TB_XDR_IFC_UU UU
LEFT OUTER JOIN (
 SELECT
  B.IMSI,
  B.IMEI,
  B.MSISDN,
  A .MMEUES1APID,
  A .MMEGROUPID,
  A .MMECODE,
  A .PROCEDUREENDTIME
 FROM
  (
   SELECT
    MMEUES1APID,
    MMEGROUPID,
    MMECODE,
    MIN (PROCEDUREENDTIME) PROCEDUREENDTIME
   FROM
    ddl.tb_Xdr_ifc_s1mme
    where dt='$ANALY_DATE' and h='$ANALY_HOUR'
   GROUP BY
    MMEUES1APID,
    MMEGROUPID,
    MMECODE
  ) A
 INNER JOIN (
  SELECT
   IMSI,
   IMEI,
   MSISDN,
   MMEUES1APID,
   MMEGROUPID,
   MMECODE,
   PROCEDUREENDTIME
  FROM
   ddl.tb_Xdr_ifc_s1mme
   where dt='$ANALY_DATE' and h='$ANALY_HOUR'
 ) B ON A .PROCEDUREENDTIME = B.PROCEDUREENDTIME
 AND A .MMEUES1APID = B.MMEUES1APID
 AND A .MMEGROUPID = B.MMEGROUPID
 AND A .MMECODE = B.MMECODE
) S1 ON UU.MMEUES1APID = S1.MMEUES1APID
AND UU.MMEGROUPID = S1.MMEGROUPID
AND UU.MMECODE = S1.MMECODE
WHERE
 UU.dt='$ANALY_DATE' and UU.h='$ANALY_HOUR' and
 UU.PROCEDUREENDTIME - S1.PROCEDUREENDTIME <= 600000;

INSERT OVERWRITE TABLE DCL.lte_mro_source
partition(dt="$ANALY_DATE",h="$ANALY_HOUR")
SELECT
lte.objectid,
lte.vid,
lte.fileformatversion,
lte.starttime,
lte.endtime,
lte.period,
lte.enbid,
lte.userlabel,
lte.mrname,
lte.cellid,
lte.earfcn,
lte.subframenbr,
lte.prbnbr,
lte.mmeues1apid,
lte.mmegroupid,
lte.mmecode,
lte.meatime,
lte.eventtype,
lte.gridcenterlongitude,
lte.gridcenterlatitude,
lte.kpi1,
lte.kpi2,
lte.kpi3,
lte.kpi4,
lte.kpi5,
lte.kpi6,
lte.kpi7,
lte.kpi8,
lte.kpi9,
lte.kpi10,
lte.kpi11,
lte.kpi12,
lte.kpi13,
lte.kpi14,
lte.kpi15,
lte.kpi16,
lte.kpi17,
lte.kpi18,
lte.kpi19,
lte.kpi20,
lte.kpi21,
lte.kpi22,
lte.kpi23,
lte.kpi24,
lte.kpi25,
lte.kpi26,
lte.kpi27,
lte.kpi28,
lte.kpi29,
lte.kpi30,
lte.kpi31,
lte.kpi32,
lte.kpi33,
lte.kpi34,
lte.kpi35,
lte.kpi36,
lte.kpi37,
lte.kpi38,
lte.kpi39,
lte.kpi40,
lte.kpi41,
lte.kpi42,
lte.kpi43,
lte.kpi44,
lte.kpi45,
lte.kpi46,
lte.kpi47,
lte.kpi48,
lte.kpi49,
lte.kpi50,
lte.kpi51,
lte.kpi52,
lte.kpi53,
lte.kpi54,
lte.kpi55,
lte.kpi56,
lte.kpi57,
lte.kpi58,
lte.kpi59,
lte.kpi60,
lte.kpi61,
lte.kpi62,
lte.kpi63,
lte.kpi64,
lte.kpi65,
lte.kpi66,
lte.kpi67,
lte.kpi68,
lte.kpi69,
lte.kpi70,
lte.kpi71,
lte.length,
lte.city,
lte.xdrtype,
lte.interface,
lte.xdrid,
lte.rat,
S1.imsi,
S1.imei,
S1.msisdn,
lte.mrtype,
lte.neighborcellnumber,
lte.gsmneighborcellnumber,
lte.tdsneighborcellnumber,
lte.v_enb,
lte.mrtime
FROM
 ddl.lte_mro_source lte
LEFT OUTER JOIN (
 SELECT
  B.IMSI,
  B.IMEI,
  B.MSISDN,
  A .MMEUES1APID,
  A .MMEGROUPID,
  A .MMECODE,
  A .PROCEDUREENDTIME
 FROM
  (
   SELECT
    MMEUES1APID,
    MMEGROUPID,
    MMECODE,
    MIN (PROCEDUREENDTIME) PROCEDUREENDTIME
   FROM
    ddl.tb_xdr_ifc_s1mme
    where dt='$ANALY_DATE' and h='$ANALY_HOUR'
   GROUP BY
    MMEUES1APID,
    MMEGROUPID,
    MMECODE
  ) A
 INNER JOIN (
  SELECT
   IMSI,
   IMEI,
   MSISDN,
   MMEUES1APID,
   MMEGROUPID,
   MMECODE,
   PROCEDUREENDTIME
  FROM
   ddl.tb_xdr_ifc_s1mme
   where dt='$ANALY_DATE' and h='$ANALY_HOUR'
 ) B ON A .PROCEDUREENDTIME = B.PROCEDUREENDTIME
 AND A .MMEUES1APID = B.MMEUES1APID
 AND A .MMEGROUPID = B.MMEGROUPID
 AND A .MMECODE = B.MMECODE
) S1 ON lte.MMEUES1APID = S1.MMEUES1APID
AND lte.MMEGROUPID = S1.MMEGROUPID
AND lte.MMECODE = S1.MMECODE
WHERE
 lte.dt='$ANALY_DATE' and lte.h='$ANALY_HOUR' and
 lte.MRTIME - S1.PROCEDUREENDTIME <= 600000;



EOF

exit 0
